name: Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    name: Build ${{ matrix.os }} ${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - os: windows
            runner: windows-latest
            arch: x86
            artifact_name: ebenezer-windows-32
          - os: windows
            runner: windows-latest
            arch: x64
            artifact_name: ebenezer-windows-64
          - os: linux
            runner: ubuntu-20.04
            arch: x64
            artifact_name: ebenezer-linux-64

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8.8'
          architecture: ${{ matrix.arch }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Collect static files
        run: python manage.py collectstatic --noinput

      - name: Build com PyInstaller (Windows)
        if: runner.os == 'windows'
        shell: cmd
        run: |
          dir staticfiles
          pyinstaller --onefile main.py --name ${{ matrix.artifact_name }} ^
            --collect-all jazzmin ^
            --hidden-import=django ^
            --hidden-import=whitenoise ^
            --hidden-import=whitenoise.middleware ^
            --hidden-import=whitenoise.storage ^
            --hidden-import=jazzmin ^
            --hidden-import=jazzmin.templatetags.jazzmin_tags ^
            --hidden-import=jazzmin.compat ^
            --hidden-import=ebenezer.wsgi ^
            --add-data "staticfiles;staticfiles" ^
            --add-data "templates;templates" ^
            --add-data "core\\management;core\\management"

      - name: Build com PyInstaller (Linux)
        if: runner.os == 'linux'
        run: |
          pyinstaller --onefile main.py --name ${{ matrix.artifact_name }} \
            --collect-all jazzmin \
            --hidden-import=django \
            --hidden-import=whitenoise \
            --hidden-import=whitenoise.middleware \
            --hidden-import=whitenoise.storage \
            --hidden-import=jazzmin \
            --hidden-import=jazzmin.templatetags.jazzmin_tags \
            --hidden-import=jazzmin.compat \
            --hidden-import=ebenezer.wsgi \
            --add-data "staticfiles:staticfiles" \
            --add-data "templates:templates" \
            --add-data "core/management:core/management"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: dist/${{ matrix.artifact_name }}*

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/

      - name: Zip all builds
        run: |
          cd dist
          for dir in *; do
            zip -j "${dir}.zip" "$dir"/*
          done

      - name: Create Release if needed
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release view "${{ github.ref_name }}" --repo "${{ github.repository }}" || \
          gh release create "${{ github.ref_name }}" --repo "${{ github.repository }}" --generate-notes

      - name: Upload assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for file in dist/*.zip; do
            gh release upload "${{ github.ref_name }}" "$file" --repo "${{ github.repository }}" --clobber
          done
